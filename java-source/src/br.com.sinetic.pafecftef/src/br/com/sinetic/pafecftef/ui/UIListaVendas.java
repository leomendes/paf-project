/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.sinetic.pafecftef.ui;

import br.com.sinetic.pafecftef.action.AListaVendas;
import br.com.sinetic.pafecftef.action.Controller;
import br.com.sinetic.pafecftef.control.ListaDeVendas;
import javax.swing.table.DefaultTableModel;
import br.com.sinetic.pafecftef.control.Control;

/**
 *
 * @author Administrador
 */
public class UIListaVendas extends javax.swing.JPanel {

    public static final int COLUMN_ID = 0;
    public static final int COLUMN_VENDEDOR = 1;
    public static final int COLUMN_DESCR = 2;
    
    public AListaVendas aLV;
    
    /**
     * Creates new form UIListaVendas
     */
    public UIListaVendas() {
        initComponents();
    }
    
    public void setAction(AListaVendas a) {
        aLV = a;
    }

    /**
     * Pega o código do item selecionado
     * @return 
     * ERRO -1: Nenhum Item selecionado
     */
    public Integer getSelectedItem() {
        int row = jtVendas.getSelectedRow();
        
        if (row == -1) {
             return null;
        }
        
        int id = (Integer)jtVendas.getValueAt(row, COLUMN_ID);
        return id;
    }
    
    public boolean setList(ListaDeVendas ldv) {
        if (ldv == null) {
            return false;
        }
        
        //@todo
        // Melhorar este update (O mesmo pisca na tela)
        
        //Salva a seleção
        int selCol = jtVendas.getSelectedColumn();
        int selRow = jtVendas.getSelectedRow();
        
        //Limpa a tabela
        ((DefaultTableModel)jtVendas.getModel()).setRowCount(0);
        
        //Adiciona os novos itens
        for (int i = 0; i < ldv.getTotalItens(); i++) {
            ((DefaultTableModel)jtVendas.getModel()).addRow(new Object[] {ldv.getCodigo(i), ldv.getVendedor(i), ldv.getDescricao(i)});
        }
        
        //Retoma a seleção anterior
        jtVendas.changeSelection(selRow, selCol, false, false);
        
        return true;
    }
    
    private void desabilitaComponentes() {
        jbIniciar.setEnabled(false);
        jbIniciar.setEnabled(false);
    }
    
    public void habilitaComponentes() {
        jbIniciar.setEnabled(true);
        jbIniciar.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbIniciar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtVendas = new javax.swing.JTable();

        jbIniciar.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        jbIniciar.setText("Iniciar Venda");
        jbIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIniciarActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        jbCancelar.setText("Cancelar Pré-Venda");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jtVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Vendedor", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtVendas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtVendas.setShowVerticalLines(false);
        jtVendas.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtVendas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbIniciar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbIniciar)
                    .addComponent(jbCancelar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIniciarActionPerformed
        if (Control.isBloqueado()) {
            Controller.messageBox("Ação não pode ser executada pois o PAF está bloqueado!");
            return;
        }
        else if (Control.getStatusDiaFiscal() != Control.DIA_FISCAL_ABERTO) {
            Controller.messageBox("Ação não pode ser executada pois o caixa não está aberto!");
            return;
        }
        
        //Desabilita botoes
        desabilitaComponentes();

        //Chama mudança de estado -  Ir para tela de pagamento
        Controller.mudarEstado(Controller.ESTADO_CONFIRMA_PREVENDA);

    }//GEN-LAST:event_jbIniciarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        if (Control.isBloqueado()) {
            Controller.messageBox("Ação não pode ser executada pois o PAF está bloqueado!");
            return;
        }
        else if (Control.getStatusDiaFiscal() != Control.DIA_FISCAL_ABERTO) {
            Controller.messageBox("Ação não pode ser executada pois o caixa não está aberto!");
            return;
        }
        
        Integer codPV = getSelectedItem();
        if (codPV == null) {
            Controller.messageBox("Não há nenhuma Pré-Venda selecionada!");
        }
        
        if (!Controller.confirmBox("Deseja realmente cancelar a Pre-Venda nº"+codPV+"?")) {
            return;
        }
        
        //Chama o cancelamento da pré-venda
        if (aLV.cancelaPreVenda(codPV)) {
            Controller.messageBox("Pré-Venda cancelada com sucesso!");
        }
        else {
            Controller.messageBox("Erro ao cancelar Pré-Venda!");
        }
    }//GEN-LAST:event_jbCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbIniciar;
    private javax.swing.JTable jtVendas;
    // End of variables declaration//GEN-END:variables
}
